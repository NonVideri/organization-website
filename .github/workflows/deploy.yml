name: Deploy Application

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create SSH directory
        run: mkdir -p ~/.ssh/
      
      - name: Install SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.VPS_HOST_KEY }}" >> ~/.ssh/known_hosts
      
      - name: Create env files
        run: |
          # SvelteKit .env
          echo "${{ secrets.SVELTEKIT_ENV }}" > ./sveltekit/.env
          
          # Pocketbase .env
          echo "${{ secrets.POCKETBASE_ENV }}" > ./pocketbase/.env

          # Flarum .env
          # echo "${{ secrets.FLARUM_ENV }}" > ./flarum/.env
          # echo "${{ secrets.FLARUM_DB_ENV }}" > ./flarum/db.env

          # Certbot .env
          echo "${{ secrets.CERTBOT_ENV }}" > ./certbot/.env

      - name: Debug Secrets
        run: |
          if [[ -z "${{ secrets.VPS_HOST }}" ]]; then
            echo "VPS_HOST is not set!"
            exit 1
          else
            echo "VPS_HOST is set."
          fi

          if [[ -z "${{ secrets.VPS_PORT }}" ]]; then
            echo "VPS_PORT is not set!"
            exit 1
          else
            echo "VPS_PORT is set."
          fi

          if [[ -z "${{ secrets.VPS_USER }}" ]]; then
            echo "VPS_USER is not set!"
            exit 1
          else
            echo "VPS_USER is set."
          fi

      - name: Validate VPS_HOST
        run: |
          if [[ ! "${{ secrets.VPS_HOST }}" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
            echo "VPS_HOST is not a valid IP address."
            exit 1
          else
            echo "VPS_HOST is a valid IP address."
          fi
      
      - name: Copy files to VPS
        run: |
          rsync -avz --delete \
            -e "ssh -p ${{ secrets.VPS_PORT }}" \
            --exclude 'pb_data' \
            --exclude 'node_modules' \
            --exclude '.git' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/app/
      
      - name: Deploy on VPS
        run: |
          ssh -p "${{ secrets.VPS_PORT }}" "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" '
            cd /opt/app && \
            docker-compose pull && \
            docker-compose build --no-cache && \
            docker-compose up -d
          '

      - name: Cleanup
        run: rm -rf ~/.ssh